import fs from "fs/promises"
import path from "path"

class Path {
  constructor(path:string) { this.inner = path }
  
  inner: string

  resolve(join:string): Path { return new Path(path.resolve(this.inner,join)) }
  
  read(): Promise<string> { return fs.readFile(this.inner,"utf8") }
  write(content:string): Promise<void> { return fs.writeFile(this.inner,content) }
  append(content:string): Promise<void> { return fs.appendFile(this.inner,content) }
}

const src = new Path(path.resolve(import.meta.url.slice("file:///".length),"../../src-tauri/src/"))
const module = src.resolve("module")

const tauriCommandsFiles = await fs.readdir(module.inner)

const modIndex = tauriCommandsFiles.indexOf("mod.rs")
if(modIndex!==-1) tauriCommandsFiles.splice(modIndex,1)

const tauriCommands: string[] = []

await Promise.all(
  tauriCommandsFiles.map(async file => {
    const content = await module.resolve(file).read()
    //#[command(steamPath)] -> steamPath
    const regex = /#\[command\((.*?)\)\]/g
  
    const handlers = (content.match(regex)||[]).map(v=>v.trim().slice(10,-2))
    Array.prototype.push.apply(tauriCommands,handlers)
  })
)

module.resolve("mod.rs").write(getContent(tauriCommands,tauriCommandsFiles))

function getContent(handlers:string[],mods:string[]): string {
const concatHandlers = handlers.map((v)=>getHandler(v)).join(",\n    ")
const concatMod = mods.map(v=>"mod "+v.slice(0,-3)+";").join("\n")
return `//this file is auto-generated by tools/index.ts
use tauri::{Builder, Wry};

${concatMod}

pub fn invoke_handler(builder: Builder<Wry>) -> Builder<Wry> { 
  builder.invoke_handler(tauri::generate_handler![
    ${concatHandlers}
  ])
}`}

function getHandler(name: string): string {

  const regex = /(^|[A-Z]).*?(?=[A-Z])/gm // helloWorldThis => [hello, World, This]
  const handler = (name.match(regex)||[]).map(v=>v.toLowerCase())
  handler.push(name)

  return handler.join("::")
}